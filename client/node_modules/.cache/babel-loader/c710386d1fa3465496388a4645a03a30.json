{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n/*\r\n * Parses a string or buffer into an object\r\n * @param {String|Buffer} src - source to be parsed\r\n * @returns {Object}\r\n*/\n\n\nfunction parse(src) {\n  var obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split('\\n').forEach(function (line) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    var keyValueArr = line.match(/^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$/); // matched?\n\n    if (keyValueArr != null) {\n      var key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      var value = keyValueArr[2] ? keyValueArr[2] : ''; // expand newlines in quoted values\n\n      var len = value ? value.length : 0;\n\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\n        value = value.replace(/\\\\n/gm, '\\n');\n      } // remove any surrounding quotes and extra spaces\n\n\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim();\n      obj[key] = value;\n    }\n  });\n  return obj;\n}\n/*\r\n * Main entry point into dotenv. Allows configuration before loading .env\r\n * @param {Object} options - valid options: path ('.env'), encoding ('utf8')\r\n * @returns {Boolean}\r\n*/\n\n\nfunction config(options) {\n  var path = '.env';\n  var encoding = 'utf8';\n\n  if (options) {\n    if (options.path) {\n      path = options.path;\n    }\n\n    if (options.encoding) {\n      encoding = options.encoding;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    var parsedObj = parse(fs.readFileSync(path, {\n      encoding: encoding\n    }));\n    Object.keys(parsedObj).forEach(function (key) {\n      process.env[key] = process.env[key] || parsedObj[key];\n    });\n    return {\n      parsed: parsedObj\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.load = config;\nmodule.exports.parse = parse;","map":{"version":3,"sources":["C:/Users/kable/Documents/CapstoneMarch2021/capstone-finish/client/node_modules/dotenv/lib/main.js"],"names":["fs","require","parse","src","obj","toString","split","forEach","line","keyValueArr","match","key","value","len","length","charAt","replace","trim","config","options","path","encoding","parsedObj","readFileSync","Object","keys","process","env","parsed","e","error","module","exports","load"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAIC,GAAG,GAAG,EAAV,CADmB,CAGnB;;AACAD,EAAAA,GAAG,CAACE,QAAJ,GAAeC,KAAf,CAAqB,IAArB,EAA2BC,OAA3B,CAAmC,UAAUC,IAAV,EAAgB;AACjD;AACA,QAAIC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAW,iCAAX,CAAlB,CAFiD,CAGjD;;AACA,QAAID,WAAW,IAAI,IAAnB,EAAyB;AACvB,UAAIE,GAAG,GAAGF,WAAW,CAAC,CAAD,CAArB,CADuB,CAGvB;;AACA,UAAIG,KAAK,GAAGH,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA5B,GAAkC,EAA9C,CAJuB,CAMvB;;AACA,UAAII,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACE,MAAT,GAAkB,CAAjC;;AACA,UAAID,GAAG,GAAG,CAAN,IAAWD,KAAK,CAACG,MAAN,CAAa,CAAb,MAAoB,GAA/B,IAAsCH,KAAK,CAACG,MAAN,CAAaF,GAAG,GAAG,CAAnB,MAA0B,GAApE,EAAyE;AACvED,QAAAA,KAAK,GAAGA,KAAK,CAACI,OAAN,CAAc,OAAd,EAAuB,IAAvB,CAAR;AACD,OAVsB,CAYvB;;;AACAJ,MAAAA,KAAK,GAAGA,KAAK,CAACI,OAAN,CAAc,gBAAd,EAAgC,EAAhC,EAAoCC,IAApC,EAAR;AAEAb,MAAAA,GAAG,CAACO,GAAD,CAAH,GAAWC,KAAX;AACD;AACF,GArBD;AAuBA,SAAOR,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASc,MAAT,CAAiBC,OAAjB,EAA0B;AACxB,MAAIC,IAAI,GAAG,MAAX;AACA,MAAIC,QAAQ,GAAG,MAAf;;AAEA,MAAIF,OAAJ,EAAa;AACX,QAAIA,OAAO,CAACC,IAAZ,EAAkB;AAChBA,MAAAA,IAAI,GAAGD,OAAO,CAACC,IAAf;AACD;;AACD,QAAID,OAAO,CAACE,QAAZ,EAAsB;AACpBA,MAAAA,QAAQ,GAAGF,OAAO,CAACE,QAAnB;AACD;AACF;;AAED,MAAI;AACF;AACA,QAAIC,SAAS,GAAGpB,KAAK,CAACF,EAAE,CAACuB,YAAH,CAAgBH,IAAhB,EAAsB;AAAEC,MAAAA,QAAQ,EAAEA;AAAZ,KAAtB,CAAD,CAArB;AAEAG,IAAAA,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBf,OAAvB,CAA+B,UAAUI,GAAV,EAAe;AAC5Ce,MAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ,IAAmBe,OAAO,CAACC,GAAR,CAAYhB,GAAZ,KAAoBW,SAAS,CAACX,GAAD,CAAhD;AACD,KAFD;AAIA,WAAO;AAAEiB,MAAAA,MAAM,EAAEN;AAAV,KAAP;AACD,GATD,CASE,OAAOO,CAAP,EAAU;AACV,WAAO;AAAEC,MAAAA,KAAK,EAAED;AAAT,KAAP;AACD;AACF;;AAEDE,MAAM,CAACC,OAAP,CAAed,MAAf,GAAwBA,MAAxB;AACAa,MAAM,CAACC,OAAP,CAAeC,IAAf,GAAsBf,MAAtB;AACAa,MAAM,CAACC,OAAP,CAAe9B,KAAf,GAAuBA,KAAvB","sourcesContent":["'use strict'\r\n\r\nvar fs = require('fs')\r\n\r\n/*\r\n * Parses a string or buffer into an object\r\n * @param {String|Buffer} src - source to be parsed\r\n * @returns {Object}\r\n*/\r\nfunction parse (src) {\r\n  var obj = {}\r\n\r\n  // convert Buffers before splitting into lines and processing\r\n  src.toString().split('\\n').forEach(function (line) {\r\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\r\n    var keyValueArr = line.match(/^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$/)\r\n    // matched?\r\n    if (keyValueArr != null) {\r\n      var key = keyValueArr[1]\r\n\r\n      // default undefined or missing values to empty string\r\n      var value = keyValueArr[2] ? keyValueArr[2] : ''\r\n\r\n      // expand newlines in quoted values\r\n      var len = value ? value.length : 0\r\n      if (len > 0 && value.charAt(0) === '\"' && value.charAt(len - 1) === '\"') {\r\n        value = value.replace(/\\\\n/gm, '\\n')\r\n      }\r\n\r\n      // remove any surrounding quotes and extra spaces\r\n      value = value.replace(/(^['\"]|['\"]$)/g, '').trim()\r\n\r\n      obj[key] = value\r\n    }\r\n  })\r\n\r\n  return obj\r\n}\r\n\r\n/*\r\n * Main entry point into dotenv. Allows configuration before loading .env\r\n * @param {Object} options - valid options: path ('.env'), encoding ('utf8')\r\n * @returns {Boolean}\r\n*/\r\nfunction config (options) {\r\n  var path = '.env'\r\n  var encoding = 'utf8'\r\n\r\n  if (options) {\r\n    if (options.path) {\r\n      path = options.path\r\n    }\r\n    if (options.encoding) {\r\n      encoding = options.encoding\r\n    }\r\n  }\r\n\r\n  try {\r\n    // specifying an encoding returns a string instead of a buffer\r\n    var parsedObj = parse(fs.readFileSync(path, { encoding: encoding }))\r\n\r\n    Object.keys(parsedObj).forEach(function (key) {\r\n      process.env[key] = process.env[key] || parsedObj[key]\r\n    })\r\n\r\n    return { parsed: parsedObj }\r\n  } catch (e) {\r\n    return { error: e }\r\n  }\r\n}\r\n\r\nmodule.exports.config = config\r\nmodule.exports.load = config\r\nmodule.exports.parse = parse\r\n"]},"metadata":{},"sourceType":"script"}